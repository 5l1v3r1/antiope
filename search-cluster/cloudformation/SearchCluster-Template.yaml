AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy the Inventory Component of Antiope

Parameters:

  pBucketName:
    Description: Name of the bucket to hold the images
    Type: String

  pDomainName:
    Description: Name of the Elasticsearch Domain
    Type: String
    MaxLength: 28

  pLambdaZipFile:
    Description: File Name for the lambdas
    Type: String
    Default: inventory.zip

  pClusterInstanceType:
    Type: String
    Description: Size of the ES Cluster
    Default: t2.small.elasticsearch
    ConstraintDescription: Must be a valid Elasticsearch Service InstanceType (https://aws.amazon.com/elasticsearch-service/pricing/)

  pClusterInstanceCount:
    Type: Number
    Description: Cluster Instance Count
    Default: 1

  pClusterEncryption:
    Type: String
    Description: Enable Encryption for the Elasticsearch Cluster
    Default: False
    AllowedValues:
      - True
      - False

  pCognitoKibanaAuthRole:
    Type: String
    Description: ARN for the Kibana Cognito Auth role (Created by the Cognito Stack)

Conditions:
  EncryptionEnabled: !Equals [ !Ref pClusterEncryption, True ]


Resources:

  SearchClusterDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Ref pCognitoKibanaAuthRole
            Action: "es:*"
            Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${pDomainName}/*"
      DomainName: !Ref pDomainName
      EBSOptions:
        EBSEnabled: true
        Iops: 0
        VolumeSize: 20
        VolumeType: "gp2"
      ElasticsearchClusterConfig:
        # FIXME
        DedicatedMasterEnabled: false
        InstanceCount: !Ref pClusterInstanceCount
        ZoneAwarenessEnabled: false
        InstanceType: !Ref pClusterInstanceType
      ElasticsearchVersion: 6.3
      # Encryption at rest is not supported with t2.small.elasticsearch
      EncryptionAtRestOptions:
        Enabled: !Ref pClusterEncryption
        KmsKeyId:
          Fn::If:
          - EncryptionEnabled
          - Ref: SearchClusterKMSKey
          - Ref: AWS::NoValue
      SnapshotOptions:
        AutomatedSnapshotStartHour: "0"

  SearchClusterKMSKey:
    Type: AWS::KMS::Key
    Condition: EncryptionEnabled
    Properties:
      Description: !Ref AWS::StackName
      Enabled: True
      EnableKeyRotation: True
      KeyPolicy:
        Version: "2012-10-17"
        Id: "allow-iam"
        Statement:
          - Sid: "Allow everyone use of the key"
            Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource: "*"
          - Sid: "Allow s3 use of the key"
            Effect: "Allow"
            Principal:
              Service: "s3.amazonaws.com"
            Action:
              - "kms:GenerateDataKey"
              - "kms:Decrypt"
            Resource: "*"

  SearchClusterKMSKeyAlias:
    Type: AWS::KMS::Alias
    Condition: EncryptionEnabled
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}"
      TargetKeyId: !Ref SearchClusterKMSKey

  #
  # Ingest Lambda
  #
  IngestLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
        - Sid: EmuLambdaTestTrust
          Effect: Allow
          Principal:
            AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: S3Access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:*
            Effect: Allow
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref pBucketName , /*]]
              - !Join ['', ['arn:aws:s3:::', !Ref pBucketName ]]
          - Action:
            - s3:ListAllMyBuckets
            - s3:GetBucketLocation
            Effect: Allow
            Resource: '*'
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - logs:*
            Effect: Allow
      - PolicyName: GetMessages
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: !GetAtt SearchIngestEventQueue.Arn
            Action:
            - sqs:*
            Effect: Allow
      - PolicyName: IndexData
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: !Sub "${SearchClusterDomain.DomainArn}/*"
            Action:
            - es:*
            Effect: Allow

  #
  # Ingestion Function Functions
  #
  SearchIngestS3Function:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ingest-s3"
      Description: AWS Lamdba to pull data from S3 to index into Elasticsearch
      Handler: ingest_s3.lambda_handler
      Runtime: python3.6
      Timeout: 180
      # MemorySize: !Ref pSmallLambdaSize
      Role: !GetAtt IngestLambdaRole.Arn
      Code:
        S3Bucket: !Ref pBucketName
        S3Key: !Sub ${pLambdaZipFile}
      Environment:
        Variables:
          ROLE_SESSION_NAME: !Ref AWS::StackName
          INVENTORY_BUCKET: !Ref pBucketName
          ES_DOMAIN_ENDPOINT: !GetAtt SearchClusterDomain.DomainEndpoint
          SQS_QUEUE_URL: !Ref SearchIngestEventQueue
      # Tags inherited from Stack

  SearchIngestEventQueue:
    Type: AWS::SQS::Queue
    Properties:
      # KmsMasterKeyId: SearchClusterKMSKey
      # KmsDataKeyReusePeriodSeconds: 86400
      MessageRetentionPeriod: 345600 # (4 days)
      ReceiveMessageWaitTimeSeconds: 10
      # RedrivePolicy:
      #   FIXME
      VisibilityTimeout: 300

  SearchIngestEventQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SearchIngestEventQueue
      PolicyDocument:
        Version: '2012-10-17'
        Id: AllowS3
        Statement:
        - Effect: Allow
          Principal:
            AWS: '*'
          Action:
          - SQS:SendMessage
          Resource: !GetAtt SearchIngestEventQueue.Arn
          Condition:
            ArnLike:
              aws:SourceArn: !Sub "arn:aws:s3:*:*:${pBucketName}"

  SearchIngestS3FunctionMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 5 # Max
      Enabled: True
      EventSourceArn: !GetAtt SearchIngestEventQueue.Arn
      FunctionName: !GetAtt SearchIngestS3Function.Arn

  SearchIngestEventQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: True
      # AlarmActions:
      #   - String
      AlarmDescription: "Alert when Queue doesn't properly drain"
      AlarmName: !Sub "${AWS::StackName}-SearchQueueFull"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt SearchIngestEventQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      # OKActions:
      #   - String
      Period: 300
      Statistic: Average
      Threshold: 80000
      TreatMissingData: missing

  ESEnableCognitoRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: es.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonESCognitoAccess

  #
  # Dashboard
  #
  Dashboard:
    Type: "AWS::CloudWatch::Dashboard"
    Properties:
      DashboardName: !Ref AWS::StackName
      DashboardBody: !Sub |-
        {
            "widgets": [
                {
                    "type": "metric",
                    "x": 0,
                    "y": 0,
                    "width": 12,
                    "height": 3,
                    "properties": {
                        "metrics": [
                            [ "AWS/Lambda", "Invocations", "FunctionName", "${AWS::StackName}-ingest-s3", { "stat": "Sum", "period": 604800 } ],
                            [ ".", "Errors", ".", ".", { "stat": "Sum", "period": 604800 } ],
                            [ ".", "Throttles", ".", ".", { "stat": "Sum", "period": 604800 } ],
                            [ ".", "Duration", ".", ".", { "stat": "Average", "period": 604800 } ]
                        ],
                        "view": "singleValue",
                        "region": "${AWS::Region}",
                        "title": "Ingest Function Stats"
                    }
                },
                {
                    "type": "text",
                    "x": 12,
                    "y": 0,
                    "width": 3,
                    "height": 3,
                    "properties": {
                        "markdown": "# QuickLinks\n* [Kibana](https://${SearchClusterDomain.DomainEndpoint}/_plugin/kibana/)\n* [Lambda](https://console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${AWS::StackName}-ingest-s3?tab=monitoring)\n* [Cluster Health](https://console.aws.amazon.com/es/home?region=${AWS::Region}#domain:resource=${SearchClusterDomain};action=dashboard)\n* [SQS Queue](https://console.aws.amazon.com/sqs/home?region=${AWS::Region}#queue-browser:selected=${SearchIngestEventQueue};prefix=)"
                    }
                },
                {
                    "type": "metric",
                    "x": 15,
                    "y": 0,
                    "width": 3,
                    "height": 3,
                    "properties": {
                        "title": "QueueSizeAlarm",
                        "annotations": {
                            "alarms": [
                                "${SearchIngestEventQueueAlarm.Arn}"
                            ]
                        },
                        "view": "singleValue"
                    }
                },
                {
                    "type": "metric",
                    "x": 0,
                    "y": 3,
                    "width": 24,
                    "height": 6,
                    "properties": {
                        "metrics": [
                            [ "AWS/ES", "ElasticsearchRequests", "DomainName", "${SearchClusterDomain}", "ClientId", "${AWS::AccountId}", { "stat": "Maximum" } ],
                            [ ".", "IndexingRate", ".", ".", ".", ".", { "stat": "Maximum" } ],
                            [ ".", "SearchRate", ".", ".", ".", ".", { "stat": "Maximum" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "title": "Search Requests",
                        "period": 300
                    }
                },

                {
                    "type": "metric",
                    "x": 0,
                    "y": 9,
                    "width": 24,
                    "height": 6,
                    "properties": {
                        "metrics": [
                            [ "AWS/SQS", "NumberOfMessagesSent", "QueueName", "${SearchIngestEventQueue.QueueName}", { "stat": "Sum" } ],
                            [ ".", "ApproximateAgeOfOldestMessage", ".", ".", { "stat": "Sum", "visible": false } ],
                            [ ".", "NumberOfMessagesDeleted", ".", ".", { "stat": "Sum" } ],
                            [ ".", "ApproximateNumberOfMessagesNotVisible", ".", ".", { "stat": "Sum" } ],
                            [ ".", "ApproximateNumberOfMessagesDelayed", ".", ".", { "stat": "Sum" } ],
                            [ ".", "NumberOfEmptyReceives", ".", ".", { "stat": "Sum" } ],
                            [ ".", "NumberOfMessagesReceived", ".", ".", { "stat": "Sum" } ],
                            [ ".", "ApproximateNumberOfMessagesVisible", ".", ".", { "stat": "Sum" } ],
                            [ ".", "SentMessageSize", ".", ".", { "stat": "Sum", "yAxis": "right" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "yAxis": {
                            "left": {
                                "min": 0
                            },
                            "right": {
                                "min": 0
                            }
                        },
                        "title": "SQS Statistics"
                    }
                },
                {
                    "type": "metric",
                    "x": 0,
                    "y": 15,
                    "width": 24,
                    "height": 6,
                    "properties": {
                        "metrics": [
                            [ "AWS/Lambda", "Throttles", "FunctionName", "${AWS::StackName}-ingest-s3", { "stat": "Sum" } ],
                            [ ".", "Duration", ".", ".", { "stat": "Maximum", "yAxis": "right", "label": "Duration Max" } ],
                            [ ".", "Duration", ".", ".", { "stat": "Average", "yAxis": "right", "label": "Duration Avg" } ],
                            [ ".", "Invocations", ".", ".", { "stat": "Sum" } ],
                            [ ".", "Errors", ".", ".", { "stat": "Sum" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "title": "Ingest Lambda Statistics"
                    }
                },
                {
                    "type": "metric",
                    "x": 0,
                    "y": 21,
                    "width": 24,
                    "height": 6,
                    "properties": {
                        "metrics": [
                            [ "AWS/ES", "Nodes", "DomainName", "${SearchClusterDomain}", "ClientId", "${AWS::AccountId}", { "stat": "Maximum" } ],
                            [ ".", "KibanaHealthyNodes", ".", ".", ".", ".", { "stat": "Maximum" } ],
                            [ ".", "ClusterStatus.green", ".", ".", ".", ".", { "stat": "Maximum" } ],
                            [ ".", "ClusterStatus.red", ".", ".", ".", ".", { "stat": "Maximum" } ],
                            [ ".", "ClusterStatus.yellow", ".", ".", ".", ".", { "stat": "Maximum" } ],
                            [ ".", "MasterReachableFromNode", ".", ".", ".", ".", { "stat": "Maximum" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "title": "Node Stats",
                        "period": 300
                    }
                },
                {
                    "type": "metric",
                    "x": 0,
                    "y": 27,
                    "width": 24,
                    "height": 6,
                    "properties": {
                        "metrics": [
                            [ "AWS/ES", "ClusterUsedSpace", "DomainName", "${SearchClusterDomain}", "ClientId", "${AWS::AccountId}" ],
                            [ ".", "FreeStorageSpace", ".", ".", ".", "." ],
                            [ ".", "DeletedDocuments", ".", ".", ".", ".", { "yAxis": "right" } ],
                            [ ".", "SearchableDocuments", ".", ".", ".", ".", { "yAxis": "right" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "period": 300,
                        "yAxis": {
                          "left": {"min": 0 },
                          "right": {"min": 0 }
                        },
                        "title": "Cluster Disk Space and Documents"
                    }
                },
                {
                    "type": "text",
                    "x": 0,
                    "y": 30,
                    "width": 9,
                    "height": 3,
                    "properties": {
                        "markdown": "# Links and Info\n* StackName: ${AWS::StackName}\n* Lambda Package: ${pLambdaZipFile}\n"
                    }
                },
                {
                    "type": "log",
                    "x": 9,
                    "y": 30,
                    "width": 15,
                    "height": 6,
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${AWS::StackName}-ingest-s3' | fields @timestamp, @message\n| parse @message \"Processing * objects for ingestion\" as ingest_count\n| parse @message \"Skipping process of *\" as skip_count\n| parse @message \"Re-queuing * Objects\" as requeue_count\n| stats avg(ingest_count), max(ingest_count), median(ingest_count), max(skip_count), avg(skip_count), avg(requeue_count) by bin(5m)",
                        "region": "${AWS::Region}",
                        "title": "Log group: /aws/lambda/${AWS::StackName}-ingest-s3"
                    }
                }
            ]
        }

Outputs:
  StackName:
    Value: !Ref AWS::StackName
  InventoryStackVersion:
    Value: !Ref pLambdaZipFile
  ClusterEndpoint:
    Value: !GetAtt SearchClusterDomain.DomainEndpoint
  ClusterName:
    Value: !Ref SearchClusterDomain
  ESCognitoRole:
    Description: "Use this role to enable Cognito authentication in Elasticsearch"
    Value: !Ref ESEnableCognitoRole
  ESCognitoRoleArn:
    Description: "Use this role to enable Cognito authentication in Elasticsearch"
    Value: !GetAtt ESEnableCognitoRole.Arn
  KibanaURL:
    Description: "The URL to access Kibana."
    Value: !Sub "https://${SearchClusterDomain.DomainEndpoint}/_plugin/kibana/"
  SearchIngestEventQueueArn:
    Description: Arn of the SQS Queue S3 should send new events notifications to
    Value: !GetAtt SearchIngestEventQueue.Arn
  SearchIngestEventQueueUrl:
    Description: Arn of the SQS Queue S3 should send new events notifications to
    Value: !Ref SearchIngestEventQueue